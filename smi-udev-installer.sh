#!/bin/sh

create_udev_rules_file()
{
  SILICONMOTION_RULES_FILE="$1"
  SILICONMOTION_RULES_FOLDER="$(dirname "$SILICONMOTION_RULES_FILE")"
  if [ ! -d "$SILICONMOTION_RULES_FOLDER" ]; then
    mkdir -p "$SILICONMOTION_RULES_FOLDER"
    chmod 0755 "$SILICONMOTION_RULES_FOLDER"
  fi
  cat > "$SILICONMOTION_RULES_FILE" <<'EOF'
# File autogenerated by udev-installer.sh script
ACTION=="add", SUBSYSTEM=="usb", DRIVERS=="usb", \
 ATTR{idVendor}=="090c", IMPORT{builtin}="usb_id",\
 ATTR{bDeviceClass}=="ef",\
 ENV{SMIUSBDISPLAY_DEVNAME}="$env{DEVNAME}",\
 ENV{SMIUSBDISPLAY_DEVICE_ID}="$env{ID_BUS}-$env{BUSNUM}-$env{DEVNUM}-$env{ID_SERIAL}",\
 RUN+="/opt/siliconmotion/smi-udev.sh add $root $env{SMIUSBDISPLAY_DEVICE_ID} $env{SMIUSBDISPLAY_DEVNAME}"

ACTION=="remove",ATTR{bDeviceClass}=="ef",\
 ENV{PRODUCT}=="90c/*", RUN+="/opt/siliconmotion/smi-udev.sh remove $root $env{DEVNAME}"

EOF

  chmod 0644 "$SILICONMOTION_RULES_FILE"
}

systemd_start_stop_functions()
{
  cat <<'EOF'
start_service()
{
  systemctl start smiusbdisplay
}

stop_service()
{
  systemctl stop smiusbdisplay
}

EOF

}

upstart_start_stop_functions()
{
  cat <<'EOF'
start_service()
{
  start smiusbdisplay
}

stop_service()
{
  stop smiusbdisplay
}

EOF

}

siliconmotion_bootstrapper_code()
{
  cat <<'EOF'
#!/bin/sh
# File autogenerated by udev-installer.sh script

get_siliconmotion_dev_count()
{
   cat /sys/bus/usb/devices/*/manufacturer  | grep "Silicon_Motion" -c
}

get_siliconmotion_symlink_count()
{
  root=$1

  if [ ! -d "$root/siliconmotion/by-id" ]; then
    echo "0"
    return
  fi

  for f in $(find $root/siliconmotion/by-id -type l -exec realpath {} \; 2> /dev/null); do
    test -c $f && echo $f;
  done | wc -l
}

start_siliconmotion()
{
  if [ "$(get_siliconmotion_dev_count)" != "0" ]; then
    start_service
  fi
}

stop_siliconmotion()
{
  root=$1

  if [ "$(get_siliconmotion_symlink_count $root)" = "0" ]; then
    stop_service
  fi
}

remove_smdir_if_empty()
{
  root=$1
  (cd $root; rmdir -p --ignore-fail-on-non-empty siliconmotion/by-id)
}

create_siliconmotion_symlink()
{
  root=$1
  device_id=$2
  devnode=$3

  mkdir -p $root/siliconmotion/by-id
  ln -sf $devnode $root/siliconmotion/by-id/$device_id
}

unlink_siliconmotion_symlink()
{
   root=$1
   devname=$2

   for f in $root/siliconmotion/by-id/*; do
     if [ ! -e "$f" ] || ([ -L "$f" ] && [ "$f" -ef "$devname" ]); then
       unlink "$f"
     fi
   done
   (cd $root; rmdir -p --ignore-fail-on-non-empty siliconmotion/by-id)
}

prune_broken_links()
{
  root=$1

  dir="$root/siliconmotion/by-id"
  find -L "$dir" -name "$dir" -o type d -prune -o -type -l -exec rm {} +
  remove_smdir_if_empty $root
}

main()
{
  action=$1
  root=$2
  devnode=$4

  if [ "$action" = "add" ]; then
    device_id=$3
    create_siliconmotion_symlink $root $device_id $devnode
    start_siliconmotion
  elif [ "$action" = "remove" ]; then
      devname=$3
      unlink_siliconmotion_symlink "$root" "$devname"
      stop_siliconmotion "$root"
  elif [ "$action" = "START" ]; then
    start_siliconmotion
  fi
}

EOF
}

create_main_function()
{
  cat <<'EOF'

if [ "$ACTION" = "add" ] && [ "$#" -ge 3 ]; then
  main $1 $2 $3 $4
  return 0
fi

if  [ "$ACTION" = "remove" ]; then
  if [ "$#" -ge 2 ]; then
    main $1 $2 $3 $4
    return 0
  else
    prune_broken_links $root
    return 0
  fi
fi

EOF
}

create_bootstrap_file()
{
  init_daemon=$1
  filename=$2

  if [ "$init_daemon" = "upstart" ]; then
    start_stop_functions="$(upstart_start_stop_functions)"
  elif [ "$init_daemon" = "systemd" ]; then
    start_stop_functions="$(systemd_start_stop_functions)"
  elif [ "$init_daemon" = "runit" ]; then
    start_stop_functions="$(runit_start_stop_functions)"
  else
    (>&2 echo "Unknown init daemon: $init_daemon")
    exit 1
  fi

  siliconmotion_bootstrapper_code > "$filename"
  echo "$start_stop_functions" >> "$filename"
  create_main_function >> "$filename"
  chmod 0744 "$filename"
}

trigger_udev_if_devices_connected()
{
  for device in $(grep -lw 090c /sys/bus/usb/devices/*/idVendor); do
    udevadm trigger --action=add "$(dirname "$device")"
  done
}

main()
{
  init_daemon=$1
  rules_path=$2
  udev_script_path=$3
  create_bootstrap_file "$init_daemon" "$udev_script_path"
  create_udev_rules_file "$rules_path"
  trigger_udev_if_devices_connected
}

if [ "$#" = "3" ]; then
  main "$1" "$2" "$3"
fi
